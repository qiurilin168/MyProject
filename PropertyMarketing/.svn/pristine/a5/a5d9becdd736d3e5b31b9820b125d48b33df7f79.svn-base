package com.ht.dao.impl;

import com.ht.bean.Sale;
import com.ht.common.bean.Pager;
import com.ht.dao.AbstractBaseDAO;
import com.ht.dao.SaleDAO;
import org.hibernate.Session;
import org.hibernate.query.Query;

import java.util.List;

public class SaleDAOImpl extends AbstractBaseDAO implements SaleDAO {
    @Override
    public void save(Sale sale) {
        getSessionFactory().getCurrentSession().save(sale);
    }

    @Override
    public void update(Sale sale) {

    }

    @Override
    public void updateStatus(Sale sale) {
        Session session = getSessionFactory().getCurrentSession();
        Query query = session.createQuery("update Sale set status =:status where id=:id");
        query.setParameter("status",sale.getStatus());
        query.setParameter("id",sale.getId());
        query.executeUpdate();
    }

    @Override
    public void remove(Sale sale) {

    }

    @Override
    public Pager<Sale> listByPager(Pager<Sale> pager) {
        return null;
    }

    @Override
    public long count() {
        return 0;
    }

    @Override
    public Sale getById(String s) {
        return null;
    }

    @Override
    public List<Sale> ListAll(String s) {
        return null;
    }


    @Override
    public Pager<Sale> listByEmployeeId(Pager<Sale> pager,String employeeId) {
        Session session = getSessionFactory().getCurrentSession();
        Query query = session.createQuery("from Sale where emp_id =:emp_id");
        query.setParameter("emp_id",employeeId);
        query.setFirstResult(pager.getBeginIndex());
        query.setMaxResults(pager.getPageSize());
        pager.setTotal((int)countByEmployeeId(employeeId));
        pager.setResults(query.list());
        return pager;
    }


    public long countByEmployeeId(String employeeId){
        Session session = getSessionFactory().getCurrentSession();
        Query query = session.createQuery("select  count(id) from Sale where emp_id=:emp_id");
        query.setParameter("emp_id",employeeId);
        long count =(long) query.uniqueResult();
        return count;
    }

    @Override
    public long countByEmployeeIdAndMonth(String employeeId, int month) {
        Session session = getSessionFactory().getCurrentSession();
        Query query = session.createQuery("select  count(id) from Sale where  emp_id=:emp_id and month(sale_time) =:month");
        query.setParameter("emp_id",employeeId);
        query.setParameter("month",month);
        long count =(long) query.uniqueResult();
        return count;
    }

    @Override
    public List<Sale> listAllByEmployeeId(String employeeId) {
        Session session = getSessionFactory().getCurrentSession();
        Query query = session.createQuery("from Sale where emp_id =:emp_id");
        query.setParameter("emp_id",employeeId);
        List<Sale> sales = query.list();
        return sales;
    }

    @Override
    public List<Sale> listByEmployeeIdAndMonth(String employeeId, int month) {
        Session session = getSessionFactory().getCurrentSession();
        Query query = session.createQuery("from Sale where month(sale_time) =:month and emp_id =:emp_id");
        query.setParameter("emp_id",employeeId);
        query.setParameter("month",month);
        List<Sale> sales = query.list();
        return sales;
    }
}
